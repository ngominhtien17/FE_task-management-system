// src/features/task/pages/TaskKanbanPage.tsx

import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Plus, ArrowLeft, Info } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { TaskFilter } from "../components/TaskFilter";
import { TaskPriorityBadge } from "../components/TaskPriorityBadge";
import type { Task } from "../types";
import TaskDetailPage from "./TaskDetailPage";

// Mock data for demonstration
const MOCK_TASKS: Task[] = [
  {
    id: "1",
    title: "C·∫≠p nh·∫≠t b√°o c√°o NCKH",
    description: "C·∫≠p nh·∫≠t b√°o c√°o ti·∫øn ƒë·ªô nghi√™n c·ª©u khoa h·ªçc theo m·∫´u m·ªõi",
    assignee: "Nguy·ªÖn VƒÉn A",
    deadline: "H√¥m nay",
    priority: "high",
    status: "overdue",
    progress: 60,
    lastUpdate: "09/05/2025 10:35"
  },
  {
    id: "2",
    title: "Ho√†n thi·ªán ƒë·ªÅ c∆∞∆°ng b√†i gi·∫£ng",
    description: "So·∫°n ƒë·ªÅ c∆∞∆°ng chi ti·∫øt cho m√¥n h·ªçc m·ªõi",
    assignee: "Tr·∫ßn Th·ªã B",
    deadline: "12/05/2025",
    priority: "medium",
    status: "in_progress",
  },
  {
    id: "3",
    title: "ƒê√°nh gi√° sinh vi√™n th·ª±c t·∫≠p",
    description: "ƒê√°nh gi√° b√°o c√°o v√† k·∫øt qu·∫£ th·ª±c t·∫≠p c·ªßa sinh vi√™n",
    assignee: "L√™ VƒÉn C",
    deadline: "15/05/2025",
    priority: "low",
    status: "in_progress",
  },
  {
    id: "4",
    title: "So·∫°n ƒë·ªÅ thi cu·ªëi k·ª≥",
    description: "So·∫°n ƒë·ªÅ thi k·∫øt th√∫c h·ªçc ph·∫ßn",
    assignee: "Ph·∫°m Th·ªã D",
    deadline: "18/05/2025",
    priority: "high",
    status: "not_started",
  },
  {
    id: "5",
    title: "H·ªçp h·ªôi ƒë·ªìng khoa h·ªçc",
    description: "Tham d·ª± h·ªçp h·ªôi ƒë·ªìng khoa h·ªçc c·∫•p tr∆∞·ªùng",
    assignee: "V≈© Minh E",
    deadline: "20/05/2025",
    priority: "medium",
    status: "not_started",
  },
  {
    id: "6",
    title: "Chu·∫©n b·ªã t√†i li·ªáu h·ªôi ngh·ªã",
    description: "Chu·∫©n b·ªã t√†i li·ªáu cho h·ªôi ngh·ªã khoa h·ªçc s·∫Øp t·ªõi",
    assignee: "Ho√†ng VƒÉn F",
    deadline: "22/05/2025",
    priority: "low",
    status: "not_started",
  },
  {
    id: "7",
    title: "Vi·∫øt b√†i b√°o khoa h·ªçc",
    description: "Ho√†n th√†nh b√†i b√°o khoa h·ªçc ƒë·ªÉ g·ª≠i ƒëƒÉng t·∫°p ch√≠",
    assignee: "Nguy·ªÖn VƒÉn G",
    deadline: "25/05/2025",
    priority: "high",
    status: "not_started",
  },
  {
    id: "8",
    title: "H∆∞·ªõng d·∫´n sinh vi√™n NCKH",
    description: "H∆∞·ªõng d·∫´n nh√≥m sinh vi√™n th·ª±c hi·ªán ƒë·ªÅ t√†i NCKH",
    assignee: "Tr·∫ßn Th·ªã H",
    deadline: "27/05/2025",
    priority: "medium",
    status: "not_started",
  },
  {
    id: "9",
    title: "Bi√™n so·∫°n ƒë·ªÅ c∆∞∆°ng m√¥n h·ªçc",
    description: "Bi√™n so·∫°n ƒë·ªÅ c∆∞∆°ng chi ti·∫øt m√¥n h·ªçc m·ªõi",
    assignee: "Tr·∫ßn Th·ªã B",
    deadline: "05/05/2025",
    priority: "medium",
    status: "completed",
  },
  {
    id: "10",
    title: "So·∫°n ƒë·ªÅ thi gi·ªØa k·ª≥",
    description: "So·∫°n ƒë·ªÅ thi gi·ªØa k·ª≥ cho c√°c l·ªõp",
    assignee: "Ph·∫°m Th·ªã D",
    deadline: "03/05/2025",
    priority: "medium",
    status: "completed",
  },
  {
    id: "11",
    title: "T·ªï ch·ª©c bu·ªïi seminar khoa",
    description: "ƒêi·ªÅu ph·ªëi v√† t·ªï ch·ª©c bu·ªïi seminar c·ªßa khoa",
    assignee: "V≈© Minh E",
    deadline: "29/04/2025",
    priority: "high",
    status: "completed",
  },
];

// Kanban column configuration
const columns = [
  { id: "not_started", title: "Ch∆∞a b·∫Øt ƒë·∫ßu", icon: "üìã" },
  { id: "in_progress", title: "ƒêang th·ª±c hi·ªán", icon: "üîÑ" },
  { id: "overdue", title: "Qu√° h·∫°n", icon: "‚ö†Ô∏è" },
  { id: "completed", title: "Ho√†n th√†nh", icon: "‚úì" },
];

// ƒê·ªãnh nghƒ©a l·∫°i component KanbanCard v·ªõi ch·ª©c nƒÉng ƒëi·ªÅu h∆∞·ªõng
interface KanbanCardProps {
  task: Task;
  onClick: (taskId: string) => void;
}

function KanbanCard({ task, onClick }: KanbanCardProps) {
  return (
    <div
      className="bg-white p-3 rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-shadow cursor-pointer mb-3"
      onClick={() => onClick(task.id)}
    >
      <h3 className="font-medium text-gray-800 mb-2">{task.title}</h3>
      <div className="space-y-2">
        <div className="text-sm text-gray-600">{task.deadline}</div>
        <TaskPriorityBadge priority={task.priority} />
        <div className="text-sm text-gray-600">{task.assignee}</div>
      </div>
    </div>
  );
}

export function TaskKanbanPage() {
  const navigate = useNavigate();
  const [showTaskDetail, setShowTaskDetail] = useState(false);
  const [selectedTaskId, setSelectedTaskId] = useState<string | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const [columnWidth, setColumnWidth] = useState<number>(280); // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
  

   // Theo d√µi k√≠ch th∆∞·ªõc container ƒë·ªÉ ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt
   useEffect(() => {
    const handleResize = () => {
      if (containerRef.current) {
        const containerWidth = containerRef.current.clientWidth;
        const totalColumns = columns.length;
        const gap = 24; // Kho·∫£ng c√°ch gi·ªØa c√°c c·ªôt (gap-6 = 1.5rem = 24px)
        
        // T√≠nh to√°n k√≠ch th∆∞·ªõc t·ªëi ∆∞u cho c·ªôt
        let optimalWidth = Math.floor((containerWidth - (gap * (totalColumns - 1))) / totalColumns);
        
        // ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu v√† t·ªëi ƒëa
        optimalWidth = Math.max(220, Math.min(320, optimalWidth));
        
        setColumnWidth(optimalWidth);
      }
    };
    
    // Kh·ªüi t·∫°o k√≠ch th∆∞·ªõc ban ƒë·∫ßu
    handleResize();
    
    // Theo d√µi thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï
    window.addEventListener('resize', handleResize);
    
    // Cleanup event listener khi component unmount
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  // Filter tasks by status
  const getTasksByStatus = (status: string) => {
    return MOCK_TASKS.filter(task => task.status === status);
  };
  
  const handleCreateTask = () => {
    navigate("/task/create");
  };
  
  // // X·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng khi nh·∫•p v√†o task
  // const handleTaskClick = (taskId: string) => {
  //   // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang chi ti·∫øt task
  //   navigate(`/task/detail/${taskId}`);
  // };
  
  const handleBackToList = () => {
    navigate("/task");
  };
  // X·ª≠ l√Ω hi·ªÉn th·ªã dialog thay v√¨ ƒëi·ªÅu h∆∞·ªõng
  const handleTaskClick = (taskId: string) => {
    setSelectedTaskId(taskId);
    setShowTaskDetail(true);
  };
  
  const handleCloseTaskDetail = () => {
    setShowTaskDetail(false);
    setSelectedTaskId(null);
  };
  
  const handleSearch = (query: string) => {
    console.log("Search query:", query);
    // Implement search logic
  };
  
  const handleFilter = (filters: Record<string, any>) => {
    console.log("Apply filters:", filters);
    // Implement filter logic
  };
  
  const handleSort = (field: string, direction: 'asc' | 'desc') => {
    console.log("Sort by:", field, direction);
    // Implement sort logic
  };
  
  const handleAddTaskToColumn = (columnId: string) => {
    console.log("Add task to column:", columnId);
    // In a real implementation, this might pre-fill the status field when creating a new task
    navigate("/task/create");
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <h1 className="text-2xl font-bold text-gray-800">Qu·∫£n l√Ω C√¥ng Vi·ªác</h1>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline"
            onClick={() => navigate("/task/workflow")}
            className="mr-2"
          >
            <Info size={18} className="mr-1" /> H∆∞·ªõng d·∫´n quy tr√¨nh
          </Button>
          <Button 
            onClick={handleCreateTask}
            className="bg-blue-600 hover:bg-blue-700 text-white"
          >
            <Plus size={18} className="mr-1" /> T·∫°o c√¥ng vi·ªác
          </Button>
        </div>
      </div>
      
      <div className="grid gap-4">
        <TaskFilter 
          onSearch={handleSearch} 
          onFilter={handleFilter} 
          onSort={handleSort} 
        />
        
        {/* B·ªë c·ª•c Kanban v·ªõi scroll ngang v√† k√≠ch th∆∞·ªõc c·ªôt linh ho·∫°t */}
        <div 
          ref={containerRef}
          className="grid grid-flow-col auto-cols-max gap-6 pb-6 overflow-x-auto pt-2 snap-x"
          style={{ 
            scrollbarWidth: 'thin',
            scrollbarColor: '#CBD5E0 #EDF2F7'
          }}
        >
          {columns.map(column => (
            <div 
              key={column.id} 
              className="snap-start rounded-lg"
              style={{ width: `${columnWidth}px` }}
            >
              <div className="bg-gray-50 rounded-lg p-4 h-full">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="font-semibold text-gray-700 flex items-center gap-2">
                    <span>{column.icon}</span>
                    <span>{column.title}</span>
                  </h2>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8 rounded-full hover:bg-gray-200"
                    onClick={() => handleAddTaskToColumn(column.id)}
                  >
                    <Plus size={16} />
                  </Button>
                </div>
                
                <Separator className="mb-4" />
                
                <div className="space-y-3 min-h-64">
                  {getTasksByStatus(column.id).map(task => (
                    <KanbanCard
                      key={task.id}
                      task={task}
                      onClick={handleTaskClick}
                    />
                  ))}
                  
                  {getTasksByStatus(column.id).length === 0 && (
                    <div className="text-center py-8 text-gray-400 text-sm">
                      Kh√¥ng c√≥ c√¥ng vi·ªác
                    </div>
                  )}
                  
                  <Button 
                    variant="ghost" 
                    className="w-full text-gray-500 hover:text-gray-700"
                    onClick={() => handleAddTaskToColumn(column.id)}
                  >
                    <Plus size={16} className="mr-1" /> Th√™m c√¥ng vi·ªác
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Th√™m TaskDetailPage d·∫°ng dialog */}
      {showTaskDetail && selectedTaskId && (
        <TaskDetailPage 
          taskId={selectedTaskId}
          isOpen={showTaskDetail}
          onClose={handleCloseTaskDetail}
        />
      )}
    </div>
  );
}

export default TaskKanbanPage;